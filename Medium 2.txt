#Medium 2 

#Given an integer array of size n, find all elements that appear more than ⌊ n/3 ⌋ times.
 
#Example 1:
#Input: nums = [3,2,3]
#Output: [3]


 #code:

def majority_elements(nums):
    if not nums:
        return []

    count1, count2, candidate1, candidate2 = 0, 0, None, None

    for num in nums:
        if num == candidate1:
            count1 += 1
        elif num == candidate2:
            count2 += 1
        elif count1 == 0:
            candidate1, count1 = num, 1
        elif count2 == 0:
            candidate2, count2 = num, 1
        else:
            count1 -= 1
            count2 -= 1

    # Verify candidates by counting their occurrences in the array
    count1 = nums.count(candidate1)
    count2 = nums.count(candidate2)

    # Check if candidates appear more than ⌊ n/3 ⌋ times and add them to the result
    result = []
    if count1 > len(nums) // 3:
        result.append(candidate1)
    if count2 > len(nums) // 3 and candidate1 != candidate2:
        result.append(candidate2)

    return result

# Test cases
print(majority_elements([3, 2, 3]))  # Output: [3]
print(majority_elements([1]))  # Output: [1]
print(majority_elements([1, 2]))  # Output: [1, 2]
 